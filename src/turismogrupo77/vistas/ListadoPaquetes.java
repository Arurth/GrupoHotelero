/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package turismogrupo77.vistas;

import java.sql.Date;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import turismogrupo77.accesoADatos.AlojamientoData;
import turismogrupo77.accesoADatos.CiudadData;
import turismogrupo77.accesoADatos.PaqueteData;
import turismogrupo77.accesoADatos.PasajeData;
import turismogrupo77.entidades.Alojamiento;
import turismogrupo77.entidades.Ciudad;
import turismogrupo77.entidades.Paquete;
import turismogrupo77.entidades.Pasaje;

/**
 *
 * @author Decker Soluciones
 */
public class ListadoPaquetes extends javax.swing.JInternalFrame {

    private DefaultTableModel modelo;

    /**
     * Creates new form ListadoPaquetes
     */
    public ListadoPaquetes() {
        initComponents();
        modelo = new DefaultTableModel();
        armarCabeceraTabla();
    }

    private void armarCabeceraTabla() {
        ArrayList<Object> filaCabecera = new ArrayList<>();
        filaCabecera.add("ID");
        filaCabecera.add("Origen");
        filaCabecera.add("Destino");
        filaCabecera.add("Cliente");

        for (Object it : filaCabecera) {
            modelo.addColumn(it);
        }
        jTPaquete.setModel(modelo);
    }

    private void borrarTabla() {
        int indice = modelo.getRowCount() - 1;
        for (int i = indice; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    private void borrarContenidoFormulario() {
        jDSalida.setDate(null);
        jDInicio.setDate(null);
        jDSalida.setEnabled(false);
        jDInicio.setEnabled(false);

        jCAlojamiento.removeAllItems();
        jCAlojamiento.setEnabled(true);
        jCTransporte.removeAllItems();
        jCTransporte.setEnabled(true);

        jCEstado.setEnabled(false);
        jCEstado.setSelected(false);

        jBModificar.setEnabled(false);
        jTextField1.setEnabled(false);
        jTextField1.setText("");
        jTNombreCiudad.setEnabled(false);
        jTNombreCiudad.setText("");
        jTCliente.setEnabled(true);
        jTCliente.setText("");

        borrarTabla();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTPaquete = new javax.swing.JTable();
        jDInicio = new com.toedter.calendar.JDateChooser();
        jDSalida = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jCAlojamiento = new javax.swing.JComboBox<>();
        jCTransporte = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jCEstado = new javax.swing.JCheckBox();
        jBModificar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jCTipoBusqueda = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jTNombreCiudad = new javax.swing.JTextField();
        jBListar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jTImporte = new javax.swing.JTextField();
        jBCancelar = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTCliente = new javax.swing.JTextField();
        jTTemporada = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jSCantPersonas = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        jTCantDias = new javax.swing.JTextField();

        jLabel1.setText("LISTADO DE PAQUETES");

        jTPaquete.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Origen", "Destino", "Cliente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTPaquete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTPaqueteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTPaquete);

        jDInicio.setEnabled(false);

        jDSalida.setEnabled(false);

        jLabel2.setText("Fecha Inicio");

        jLabel3.setText("Fecha Salida");

        jLabel4.setText("Alojamiento");

        jLabel5.setText("Transporte");

        jCEstado.setText("Disponible");
        jCEstado.setEnabled(false);

        jBModificar.setText("Modificar");
        jBModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarActionPerformed(evt);
            }
        });

        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Buscar Por:");

        jCTipoBusqueda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre Cliente", "Ciudad de Origen", "Ciudad de Destino", "ID Paquete", "Todos Disponibles", "No Disponibles" }));
        jCTipoBusqueda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCTipoBusquedaMouseClicked(evt);
            }
        });
        jCTipoBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCTipoBusquedaActionPerformed(evt);
            }
        });

        jLabel7.setText("Nombre Ciudad");

        jTNombreCiudad.setEnabled(false);

        jBListar.setText("Listar");
        jBListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBListarActionPerformed(evt);
            }
        });

        jLabel8.setText("Importe $");

        jTImporte.setEnabled(false);

        jBCancelar.setText("Cancelar");
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jLabel9.setText("ID Paquete");

        jTextField1.setEnabled(false);

        jLabel10.setText("Nombre Cliente");

        jLabel11.setText("Temporada");

        jSCantPersonas.setModel(new javax.swing.SpinnerNumberModel(1, 1, 20, 1));

        jLabel12.setText("Personas");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCEstado)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel8)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jDInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jDSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(148, 148, 148)
                                .addComponent(jBModificar))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jTImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTTemporada, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jCAlojamiento, 0, 139, Short.MAX_VALUE)
                                        .addComponent(jCTransporte, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jBCancelar)
                                        .addGap(35, 35, 35)
                                        .addComponent(jButton2))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jTCantDias, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(jSCantPersonas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel10)))
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCTipoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jBListar))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                        .addComponent(jTNombreCiudad, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTCliente, javax.swing.GroupLayout.Alignment.LEADING)))
                .addGap(327, 493, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCTipoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jBListar))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTNombreCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTImporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTTemporada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jSCantPersonas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jTCantDias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jDInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jCAlojamiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addComponent(jDSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jCTransporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jCEstado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBModificar)
                            .addComponent(jButton2)
                            .addComponent(jBCancelar))
                        .addGap(51, 51, 51)))
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jBListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBListarActionPerformed
        // TODO add your handling code here:
        borrarTabla();
        Ciudad ciudadEncontrada = new Ciudad();
        CiudadData city = new CiudadData();
        Paquete paquete = new Paquete();
        PaqueteData pack = new PaqueteData();
        ciudadEncontrada = city.buscarCiudad(jTNombreCiudad.getText());

        /* if (ciudadEncontrada != null) {
            ciudadEncontrada = city.buscarCiudad(jTNombreCiudad.getText());
        } else {
            JOptionPane.showMessageDialog(null, "No Existe una Ciudad con ese Nombre");
            return;
        }*/
        if (jCTipoBusqueda.getSelectedItem() == "Nombre Cliente") {
            if (jTCliente.getText() == "") {
                JOptionPane.showMessageDialog(null, "Debe Ingresar un nombre");
                return;
            }
            List<Paquete> paquetes = pack.listarPaquetesNombreCliente(jTCliente.getText());
            if (paquetes.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No hay ningun Paquete con ese nombre");
                return;
            }
            for (Paquete p : paquetes) {
                modelo.addRow(new Object[]{p.getIdPaquete(), p.getOrigen().getNombre(), p.getDestino().getNombre(), p.getCliente()});
            }
        }

        if (jCTipoBusqueda.getSelectedItem() == "Ciudad de Origen") {
            if (jTNombreCiudad.getText() == "") {
                JOptionPane.showMessageDialog(null, "Debe Ingresar un nombre de Ciudad");
                return;
            }
            if (ciudadEncontrada != null) {
                ciudadEncontrada = city.buscarCiudad(jTNombreCiudad.getText());
            } else {
                JOptionPane.showMessageDialog(null, "No Existe una Ciudad con ese Nombre");
                return;
            }
            List<Paquete> paquetes = pack.listarPaquetesCiudadOrigen(ciudadEncontrada);

            for (Paquete p : paquetes) {
                modelo.addRow(new Object[]{p.getIdPaquete(), p.getOrigen().getNombre(), p.getDestino().getNombre(), p.getCliente()});
            }
        } else if (jCTipoBusqueda.getSelectedItem() == "Ciudad de Destino") {
            if (jTNombreCiudad.getText() == "") {
                JOptionPane.showMessageDialog(null, "Debe Ingresar un nombre de Ciudad");
                return;
            }
            if (ciudadEncontrada != null) {
                ciudadEncontrada = city.buscarCiudad(jTNombreCiudad.getText());
            } else {
                JOptionPane.showMessageDialog(null, "No Existe una Ciudad con ese Nombre");
                return;
            }
            List<Paquete> paquetes = pack.listarPaquetesCiudadDestino(ciudadEncontrada);

            for (Paquete p : paquetes) {
                modelo.addRow(new Object[]{p.getIdPaquete(), p.getOrigen().getNombre(), p.getDestino().getNombre(), p.getCliente()});
            }
        }

        if (jCTipoBusqueda.getSelectedItem() == "ID Paquete") {

            if (jTextField1.getText() == "") {
                JOptionPane.showMessageDialog(null, "Debe Ingresar un ID de Paquete");
                return;
            }

            List<Paquete> paquetes = pack.listarPaquetesID(Integer.parseInt(jTextField1.getText()));

            for (Paquete p : paquetes) {
                modelo.addRow(new Object[]{p.getIdPaquete(), p.getOrigen().getNombre(), p.getDestino().getNombre(), p.getCliente()});
            }
        }

        if (jCTipoBusqueda.getSelectedItem() == "Todos Disponibles") {
            boolean estado = true;
            List<Paquete> paquetes = pack.listarPaquetesActivos(estado);
            for (Paquete p : paquetes) {
                modelo.addRow(new Object[]{p.getIdPaquete(), p.getOrigen().getNombre(), p.getDestino().getNombre(), p.getCliente()});
            }
        } else if (jCTipoBusqueda.getSelectedItem() == "No Disponibles") {
            boolean estado = false;
            List<Paquete> paquetes = pack.listarPaquetesActivos(estado);
            for (Paquete p : paquetes) {
                modelo.addRow(new Object[]{p.getIdPaquete(), p.getOrigen().getNombre(), p.getDestino().getNombre(), p.getCliente()});
            }
        }
    }//GEN-LAST:event_jBListarActionPerformed

    private void jCTipoBusquedaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCTipoBusquedaMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jCTipoBusquedaMouseClicked

    private void jCTipoBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCTipoBusquedaActionPerformed
        // Al tocar el botón se van habilitando los cuadros de texto para el ingreso
        borrarContenidoFormulario();
        if (jCTipoBusqueda.getSelectedItem() == "Ciudad de Origen" || jCTipoBusqueda.getSelectedItem() == "Ciudad de Destino") {
            jTNombreCiudad.setEnabled(true);
            jTextField1.setEnabled(false);
            jTCliente.setEnabled(false);
        } else if (jCTipoBusqueda.getSelectedItem() == "ID Paquete") {
            jTNombreCiudad.setEnabled(false);
            jTextField1.setEnabled(true);
            jTCliente.setEnabled(false);
        } else if (jCTipoBusqueda.getSelectedItem() == "Nombre Cliente") {
            jTNombreCiudad.setEnabled(false);
            jTextField1.setEnabled(false);
            jTCliente.setEnabled(true);
        } else {
            jTNombreCiudad.setEnabled(false);
            jTextField1.setEnabled(false);
            jTCliente.setEnabled(false);
        }
    }//GEN-LAST:event_jCTipoBusquedaActionPerformed

    private void jTPaqueteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTPaqueteMouseClicked
        // Va a llenar lo de abajo una vez que lo tenga seleccionado:
        jDInicio.setEnabled(true);
        jDSalida.setEnabled(true);
        jCEstado.setEnabled(true);
        jBModificar.setEnabled(true);

        Paquete paqueteSeleccionado = new Paquete();
        PaqueteData pack = new PaqueteData();
        Ciudad ciudadOrigen = new Ciudad();
        Ciudad ciudadDestino = new Ciudad();
        CiudadData city = new CiudadData();
        Pasaje pasajeEncontrado = new Pasaje();
        PasajeData pass = new PasajeData();
        Alojamiento alojamientoEncontrado = new Alojamiento();
        AlojamientoData aloj = new AlojamientoData();

        int idPaquete = (Integer) modelo.getValueAt(jTPaquete.getSelectedRow(), 0);
        paqueteSeleccionado = pack.buscarPaquete(idPaquete);

        //completa los campos fecha del elemento seleccionado
        jDInicio.setDate(Date.valueOf(paqueteSeleccionado.getFechaLLegada()));
        jDSalida.setDate(Date.valueOf(paqueteSeleccionado.getFechaSalida()));

        //completa el campo importe con el elemento seleccionado
        jTImporte.setText(paqueteSeleccionado.getImporte() + "");

        //completa el campo estado con el elemento seleccionado
        jCEstado.setSelected(paqueteSeleccionado.isEstado());

        //completa el Combo box con los Alojamientos Disponibles
        jCAlojamiento.removeAllItems();
        alojamientoEncontrado = aloj.buscarAlojamiento(paqueteSeleccionado.getAlojamiento().getIdAlojamiento());
        List<Alojamiento> alojamientos = aloj.listarAlojamientosIDciudad(alojamientoEncontrado.getCiudadDest().getIdCiudad());
        for (Alojamiento item : alojamientos) {
            jCAlojamiento.addItem(item + "");
        }
        jCAlojamiento.setSelectedItem(alojamientoEncontrado + "");

        //completa el Combo box con los Tipos de Transporte Disponibles
        jCTransporte.removeAllItems();
        List<Pasaje> pasajes = pass.listarPasajesOrigenDestino(paqueteSeleccionado.getOrigen().getIdCiudad(), paqueteSeleccionado.getDestino().getIdCiudad());
        for (Pasaje item : pasajes) {
            jCTransporte.addItem(item + "");
        }
        jCTransporte.setSelectedItem(paqueteSeleccionado.getPasaje() + "");

    }//GEN-LAST:event_jTPaqueteMouseClicked

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        // TODO add your handling code here:
        borrarContenidoFormulario();
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarActionPerformed

        //creo todo lo necesario para grabar el paquete y obtengo los datos del paquete seleccionado
        Paquete paqueteSeleccionado = new Paquete();
        PaqueteData pack = new PaqueteData();
        Ciudad ciudadOrigen = new Ciudad();
        Ciudad ciudadDestino = new Ciudad();
        CiudadData city = new CiudadData();
        Pasaje pasajeSeleccionado = new Pasaje();
        PasajeData pass = new PasajeData();
        Alojamiento alojamientoEncontrado = new Alojamiento();
        Alojamiento alojamientoSeleccionado = new Alojamiento();
        AlojamientoData aloj = new AlojamientoData();
        int idPaquete = (Integer) modelo.getValueAt(jTPaquete.getSelectedRow(), 0);
        paqueteSeleccionado = pack.buscarPaquete(idPaquete);

        //Listo todos los Alojamientos para averiguar cual es el nuevo seleccionado:
        alojamientoEncontrado = aloj.buscarAlojamiento(paqueteSeleccionado.getAlojamiento().getIdAlojamiento());
        List<Alojamiento> alojamientos = aloj.listarAlojamientosIDciudad(alojamientoEncontrado.getCiudadDest().getIdCiudad());
        for (Alojamiento item : alojamientos) {
            String item2 = item + "";
            if (jCAlojamiento.getSelectedItem().equals(item2)) {
                alojamientoSeleccionado = item;
            }
        }

        // Listo todos los pasajes para averiguar cual es el nuevo seleccionado:
        List<Pasaje> pasajes = pass.listarPasajesOrigenDestino(paqueteSeleccionado.getOrigen().getIdCiudad(), paqueteSeleccionado.getDestino().getIdCiudad());
        for (Pasaje item : pasajes) {
            String item2 = item + "";
            if (jCTransporte.getSelectedItem().equals(item2)) {
                pasajeSeleccionado = item;
            }
        }
        
        //Comienza El calculo de los nuevos precios
        double importeAlojamiento;
        double importePasaje;

        if (jDInicio.getDate() == null || jDSalida.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Debe Completar Ambos Campos de Fecha Inicio/Salida");
            return;
        }
        // Calcula el Importe Total del Paquete

        //calcular si es temporada alta, media, o baja
        LocalDate fechaI = jDInicio.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        DateTimeFormatter dti = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        //jLfecha.setText("Fecha: "+fechaN.format(dtf));
        LocalDate fechaF = jDSalida.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        if (fechaI.isAfter(fechaF)) {
            JOptionPane.showMessageDialog(null, "La Fecha de Inicio no puede ser posterior a la de Salida :-)");
            return;
        } else {
            //calcula los dias de alojamiento
            if (fechaI.getMonthValue() == 1 || fechaI.getMonthValue() == 7) {
                jTTemporada.setText("Alta");
            } else if (fechaI.getMonthValue() == 2 || fechaI.getMonthValue() == 6) {
                jTTemporada.setText("Media");
            } else {
                jTTemporada.setText("Baja");
            }

            long totaldias = ChronoUnit.DAYS.between(fechaI, fechaF);
            jTCantDias.setText(totaldias + "");
        }

        
            importeAlojamiento = (Double) alojamientoSeleccionado.getImporteDiario();
            importePasaje = (Double) pasajeSeleccionado.getImporte();
       
            //calculo usando los días y cantidad de Personas en Temporada Baja:
            double importeTotalBaja = ((importeAlojamiento * Double.valueOf(jTCantDias.getText())) * (Integer) jSCantPersonas.getValue() + (importePasaje * (Integer) jSCantPersonas.getValue()));
            //se Agrega o no el porcentaje que correspondería si es Temporada Alta:
            double importeTotalAlta = importeTotalBaja * 1.3;
            //se Agrega o no el porcentaje que correspondería si es Temporada Media:
            double importeTotalMedia = importeTotalBaja * 1.15;

        //Muestro los precios nuevos
        if (jTTemporada.getText().equals("Alta")) {
            jTImporte.setText(importeTotalAlta + "");
        } else if (jTTemporada.getText().equals("Media")) {
            jTImporte.setText(importeTotalMedia + "");
        } else {
            jTImporte.setText(importeTotalBaja + "");
        }
        
        //muestra el cuadro de Dialogo de la Confirmación del Paquete
        JFrame frame = new JFrame("Confirmar Creación de Paquete");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        //primero pasamos las fechas al formato que queremos usar:
        String diaInicio = Integer.toString(jDInicio.getCalendar().get(Calendar.DAY_OF_MONTH));
        String mesInicio = Integer.toString(jDInicio.getCalendar().get(Calendar.MONTH)+1);
        String añoInicio = Integer.toString(jDInicio.getCalendar().get(Calendar.YEAR));
        String fechaInicio = diaInicio+"/"+mesInicio+"/"+añoInicio;
        String diaSalida = Integer.toString(jDSalida.getCalendar().get(Calendar.DAY_OF_MONTH));
        String mesSalida = Integer.toString(jDSalida.getCalendar().get(Calendar.MONTH)+1);
        String añoSalida = Integer.toString(jDSalida.getCalendar().get(Calendar.YEAR));
        String fechaSalida = diaSalida+"/"+mesSalida+"/"+añoSalida;
        
        
        int respuesta = JOptionPane.showConfirmDialog(frame, "El Nuevo Importe Total del Pasaje es $: "+jTImporte.getText()+
                "\nCantidad de Personas: "+jSCantPersonas.getValue()+
                "\nCantidad de Días: "+jTCantDias.getText()+
                "\nTemporada: "+jTTemporada.getText()+
                "\nTransporte: "+pasajeSeleccionado.getTipoTransporte()+
                "\nAlojamiento: "+alojamientoSeleccionado.getNombre()+
                "\nFecha Salida: "+fechaInicio+
                "\nFecha Regreso: "+fechaSalida, "Confirmar la Modificacion del Paquete Turístico", JOptionPane.YES_NO_OPTION);

        if (respuesta == JOptionPane.YES_OPTION) {
            // Hizo click en cofirmar asi que se va a Modificar el Paquete
            
            //Ciudad ciudadOrigen = new Ciudad();
            //Ciudad ciudadDestino = new Ciudad();
           // CiudadData city = new CiudadData();
            Pasaje pasajeEncontrado = new Pasaje();
            //PasajeData pass = new PasajeData();
            //Alojamiento alojamientoEncontrado = new Alojamiento();
            //AlojamientoData aloj = new AlojamientoData();
            Paquete nuevoPaquete = new Paquete();
            //PaqueteData pack = new PaqueteData();

            //busca la ciudad de Origen y la de Destino y las asigna
            //ciudadOrigen = city.buscarCiudad(jTNombreOrigen.getText());
           // ciudadDestino = city.buscarCiudad(jtNombreDestino.getText());
           
            //Asigna el Alojamiento nuevo 
            paqueteSeleccionado.setAlojamiento(alojamientoSeleccionado);
            //Asigna el Pasaje nuevo
            paqueteSeleccionado.setPasaje(pasajeSeleccionado);

            
            
            paqueteSeleccionado.setEstado(jCEstado.isSelected());
            
            
            paqueteSeleccionado.setCantPersonas((Integer)jSCantPersonas.getValue());
            paqueteSeleccionado.setImporte(Double.parseDouble(jTImporte.getText()));

            //manejo de la fecha para agregar al paquete
            LocalDate fechaSalidas = jDSalida.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDate fechaLlegada = jDInicio.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            dti = DateTimeFormatter.ofPattern("dd/MM/yyyy");

            paqueteSeleccionado.setFechaSalida(fechaSalidas);
            paqueteSeleccionado.setFechaLLegada(fechaLlegada);

            //llama al método para modificar el paquete
            pack.modificarPaquete(paqueteSeleccionado);
            borrarContenidoFormulario();
        }else {
            //Hizo click en no así que no se va a modificar el paquete y vuelve para ver si quiere modificarlo
            return;
        }

        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_jBModificarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBListar;
    private javax.swing.JButton jBModificar;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jCAlojamiento;
    private javax.swing.JCheckBox jCEstado;
    private javax.swing.JComboBox<String> jCTipoBusqueda;
    private javax.swing.JComboBox<String> jCTransporte;
    private com.toedter.calendar.JDateChooser jDInicio;
    private com.toedter.calendar.JDateChooser jDSalida;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSpinner jSCantPersonas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTCantDias;
    private javax.swing.JTextField jTCliente;
    private javax.swing.JTextField jTImporte;
    private javax.swing.JTextField jTNombreCiudad;
    private javax.swing.JTable jTPaquete;
    private javax.swing.JTextField jTTemporada;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
